#!/usr/bin/env python3
"""
Python3 implementation of cellular automaton.

Rules of CA are encoded by CMR (Conditionally matching rules).
"""

import re
import logging
import argparse
import configparser

from ca.automatons.cmr import CMRNeumann
from ca.loaders.json_loader import JSONLoader
from ca.ui.pygame_ui import CAPygameUI

LOG = logging.getLogger(__name__)
LOG.setLevel(logging.DEBUG)
logging.basicConfig()

LOADERS = [JSONLoader]


def add_args(parser):
    """
    Add arguments.

    Args:
        parser - ArgumentParser.
    """
    parser.add_argument('--config', help="configuration files")
    parser.add_argument('--resize', action='store_true')
    parser.add_argument('-r', '--rows', type=int)
    parser.add_argument('-c', '--cols', type=int)


def main():
    """
    Main function.
    """
    parser = argparse.ArgumentParser()
    add_args(parser)
    # Add module specific arguments
    [m.add_args(parser) for m in LOADERS]
    # Parse args
    args = parser.parse_args()

    # Load config
    config = configparser.ConfigParser()
    if args.config:
        config.read(args.config)

    # Load templates
    templates = []
    for l in LOADERS:
        for template in l.load(args, config):
            templates.append(template)

    # Get automatons
    auto = get_automatons(args, config, templates)
    if not auto:
        LOG.info("No automatons")
        return

    CAPygameUI(config.cell_x, config.cell_y, auto).main_loop()


if __name__ == "__main__":
    main()
